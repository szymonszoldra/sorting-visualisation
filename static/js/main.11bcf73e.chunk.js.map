{"version":3,"sources":["components/App/App.styles.js","components/Visualisation/Visualisation.styles.js","functions/generateArray.js","functions/setColor.js","functions/sleep.js","functions/setAllToBlue.js","functions/reload.js","functions/updateCompares.js","algorithms/bubbleSort.js","algorithms/selectionSort.js","algorithms/insertionSort.js","algorithms/mergeSort.js","algorithms/coctailSort.js","components/Visualisation/Visualisation.component.js","components/App/App.component.js","index.js"],"names":["AppContainer","styled","div","HeaderContainer","header","ButtonContainer","button","CompareContainer","VisualisationContainer","SingleBar","height","generateArray","howMany","arr","i","push","Math","floor","random","setColor","first","second","color","style","backgroundColor","sleep","a","delay","parseInt","document","querySelector","value","Promise","resolve","setTimeout","setAllToBlue","querySelectorAll","forEach","bar","reload","window","location","updateCompares","compares","textContent","bubbleSort","setArr","counter","j","newArr","currentBars","temp","selectionSort","currentSmallest","insertionSort","index","unshift","splice","indexOfPreviousCounter","flag","mergeSortContainer","mergeSort","length","middle","left","slice","right","result","shift","concat","merge","coctailSort","bottom","top","hasChanged","Visualisation","useState","eventHandler","e","target","id","alert","btn","removeEventListener","disabled","useEffect","addEventListener","map","item","key","className","App","htmlFor","direction","type","name","min","max","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11bcf73e.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const AppContainer = styled.div `\n   height: 100vh;\n   width: 100vw;\n   background-color: #eee;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   flex-direction: column;\n`;\n\nexport const HeaderContainer = styled.header `\n   display: flex;\n   height: 15vh;\n   padding: 20px;\n   justify-content: center;\n   align-items: center;\n`;\n\nexport const ButtonContainer = styled.button `\n   background-color: #ccc;\n   border-radius: 15px;\n   margin-right: 30px;\n   font-size: 20px;\n   width: 150px;\n   height: 30px;\n`;\n\nexport const CompareContainer = styled.div `\nwidth: 150px;\nmargin-left: 30px;\n`","import styled from 'styled-components';\n\nexport const VisualisationContainer = styled.div`\n   display: flex;\n   width: 1200px;\n   height: 85vh;\n   margin: 0 50px;\n   background-color: pink;\n   align-items: flex-end;\n   justify-content: space-between;\n`;\n\nexport const SingleBar = styled.div`\n   width: 36px;\n   padding: 0 2px;\n   background-color: royalblue;\n   height: ${({ height }) => height + '%'};\n   padding-top: 10px;\n   text-align: center;\n   font-size: 14px;\n`;\n","const generateArray = (howMany) => {\n  const arr = [];\n\n  for (let i = 0; i < howMany; i++) {\n    arr.push(Math.floor(Math.random() * 1100) + 100);\n  }\n  return arr;\n};\n\nexport default generateArray;","const setColor = (first, second, color) => {\n  first.style.backgroundColor = color;\n  second.style.backgroundColor = color;\n};\n\nexport default setColor;","//something like sleep() function in other languages\nconst sleep = async () => {\n  const delay = parseInt(document.querySelector('#speed').value);\n  return await new Promise((resolve) => setTimeout(resolve, delay));\n};\n\nexport default sleep;","const setAllToBlue = () => {\n  const currentBars = [...document.querySelectorAll('.singleBar')];\n  currentBars.forEach((bar) => (bar.style.backgroundColor = 'royalblue'));\n}\n\nexport default setAllToBlue;","const reload = () => {\n  setTimeout(() => {\n    window.location.reload()\n  }, 2500)\n}\n\nexport default reload;","const updateCompares = () => {\n  const compares = parseInt(document.querySelector('.compares').textContent);\n  document.querySelector('.compares').textContent = compares + 1;\n}\n\nexport default updateCompares;","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\n\nconst bubbleSort = async (howMany, arr, setArr) => {\n  let counter = 1;\n  for (let i = 0; i < howMany; i++) {\n    counter = 0;\n    for (let j = 0; j < howMany - 1 - i; j++) {\n      const newArr = arr;\n      await sleep();\n\n      const currentBars = [...document.querySelectorAll('.singleBar')];\n      setAllToBlue();\n\n      setColor(currentBars[j], currentBars[j + 1], 'yellow');\n      updateCompares();\n      await sleep();\n\n      if (newArr[j] > newArr[j + 1]) {\n        setColor(currentBars[j], currentBars[j + 1], 'green');\n        await sleep();\n\n        const temp = newArr[j];\n        newArr[j] = newArr[j + 1];\n        newArr[j + 1] = temp;\n        counter++;\n      } else {\n        setColor(currentBars[j], currentBars[j + 1], 'red');\n      }\n      setArr([...newArr]);\n    }\n    if (!counter) {\n      break;\n    }\n  }\n  setAllToBlue();\n  reload();\n};\n\nexport default bubbleSort","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\n\n\n\nconst selectionSort = async (howMany, arr, setArr) => {\n  for (let i = 0; i < howMany; i++) {\n    let currentSmallest = i;\n    const newArr = arr;\n    for (let j = i + 1; j < howMany; j++) {\n      await sleep();\n\n      const currentBars = [...document.querySelectorAll('.singleBar')];\n      setAllToBlue();\n\n      setColor(currentBars[currentSmallest], currentBars[j], 'yellow');\n      updateCompares();\n      await sleep();\n\n      if (newArr[currentSmallest] > newArr[j]) {\n        setColor(currentBars[currentSmallest], currentBars[j], 'green');\n        currentSmallest = j;\n      } else {\n        setColor(currentBars[currentSmallest], currentBars[j], 'red');\n      }\n\n      setArr([...newArr]);\n    }\n\n\n    const currentBars = [...document.querySelectorAll('.singleBar')];\n\n    if (newArr[currentSmallest] !== newArr[i]) {\n      setAllToBlue();\n      setColor(currentBars[currentSmallest], currentBars[i], 'orange');\n      updateCompares();\n      await sleep();\n      const temp = newArr[currentSmallest];\n      newArr[currentSmallest] = newArr[i];\n      newArr[i] = temp;\n      setArr([...newArr]);\n    } else {\n      currentBars[currentSmallest].style.backgroundColor = 'orange';\n      updateCompares();\n      await sleep();\n      await sleep();\n    }\n\n  }\n  setAllToBlue();\n  reload();\n}\n\nexport default selectionSort;","import sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\n\n\n\n\nconst insertionSort = async (howMany, arr, setArr) => {\n  let indexOfPreviousCounter;\n\n  for (let i = 1; i < howMany; i++) {\n    const newArr = arr;\n\n    await sleep();\n\n    const currentBars = [...document.querySelectorAll('.singleBar')];\n\n    for (let index = 0; index < i; index++) {\n      currentBars[index].style.backgroundColor = 'orange';\n    }\n    await sleep();\n\n    currentBars[i].style.backgroundColor = 'yellow';\n\n    if (newArr[i] <= newArr[0]) {\n      updateCompares();\n      newArr.unshift(newArr.splice(i, 1)[0]);\n      for (let index = 0; index < i; index++) {\n        currentBars[index].style.backgroundColor = 'red';\n      }\n      indexOfPreviousCounter = 0;\n\n    } else {\n      let flag = true;\n      await sleep();\n      for (let j = 1; j < i; j++) {\n        updateCompares();\n        updateCompares();\n\n        if (newArr[i] > newArr[j - 1] && newArr[i] <= newArr[j]) {\n          indexOfPreviousCounter = j;\n          for (let index = 0; index < j; index++) {\n            currentBars[index].style.backgroundColor = 'green';\n          }\n          flag = false;\n          newArr.splice(j, 0, newArr.splice(i, 1)[0]);\n          for (let index = j; index < i; index++) {\n            currentBars[index].style.backgroundColor = 'red';\n          }\n          updateCompares();\n          break;\n        }\n      }\n      if (flag) {\n        for (let index = 0; index < i; index++) {\n          currentBars[index].style.backgroundColor = 'green';\n        }\n        indexOfPreviousCounter = i;\n      }\n    }\n    await sleep();\n    setArr([...newArr]);\n    currentBars[indexOfPreviousCounter].style.backgroundColor = 'yellow';\n    if (indexOfPreviousCounter !== i) {\n      currentBars[i].style.backgroundColor = 'red';\n\n    }\n  }\n  await sleep();\n  setAllToBlue();\n\n  reload();\n}\n\nexport default insertionSort;","import reload from '../functions/reload';\n\nconst mergeSortContainer = (arr, setArr) => {\n  const newArr = arr;\n\n  const merge = (left, right) => {\n    const result = [];\n\n    while (left.length && right.length) {\n      if (left[0] < right[0]) {\n        result.push(left.shift());\n      } else {\n        result.push(right.shift());\n      }\n    }\n    return result.concat([...left]).concat([...right]);\n  }\n\n  const mergeSort = (newArr) => {\n    if (newArr.length <= 1) {\n      return newArr\n    }\n    const length = newArr.length;\n    const middle = Math.floor(length / 2);\n    const left = newArr.slice(0, middle);\n    const right = newArr.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n  }\n\n  setArr(mergeSort(newArr));\n  reload();\n}\n\nexport default mergeSortContainer;","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\n\n\nconst coctailSort = async (howMany, arr, setArr) => {\n  let bottom = 0;\n  let top = howMany - 1;\n  let hasChanged = true;\n\n  while (hasChanged) {\n    await sleep();\n\n    let newArr = arr;\n    hasChanged = false;\n\n    for (let i = bottom; i < top; i++) {\n      const currentBars = [...document.querySelectorAll('.singleBar')];\n      setAllToBlue();\n      setColor(currentBars[i], currentBars[i + 1], 'yellow');\n      await sleep();\n\n      if (newArr[i] > newArr[i + 1]) {\n        setColor(currentBars[i], currentBars[i + 1], 'green');\n        await sleep();\n        const temp = newArr[i];\n        newArr[i] = newArr[i + 1];\n        newArr[i + 1] = temp;\n        hasChanged = true;\n        setArr([...newArr]);\n        await sleep();\n      } else {\n        setColor(currentBars[i], currentBars[i + 1], 'red');\n        await sleep();\n      }\n\n    }\n\n    newArr = arr;\n    top--;\n\n    for (let i = top; i > bottom; i--) {\n      const currentBars = [...document.querySelectorAll('.singleBar')];\n      setAllToBlue();\n      setColor(currentBars[i], currentBars[i - 1], 'yellow');\n      await sleep();\n\n      if (newArr[i] < newArr[i - 1]) {\n        setColor(currentBars[i], currentBars[i - 1], 'green');\n        await sleep();\n        const temp = newArr[i];\n        newArr[i] = newArr[i - 1];\n        newArr[i - 1] = temp;\n        hasChanged = true;\n\n        setArr([...newArr]);\n        await sleep();\n      } else {\n        setColor(currentBars[i], currentBars[i - 1], 'red');\n        await sleep();\n      }\n    }\n    newArr = arr;\n    bottom++;\n  }\n  setAllToBlue();\n  reload();\n}\n\nexport default coctailSort;","import React, { useState, useEffect } from 'react';\nimport { VisualisationContainer, SingleBar } from './Visualisation.styles';\n\nimport generateArray from '../../functions/generateArray';\n\nimport bubbleSort from '../../algorithms/bubbleSort';\nimport selectionSort from '../../algorithms/selectionSort';\nimport insertionSort from '../../algorithms/insertionSort';\nimport mergeSortContainer from '../../algorithms/mergeSort';\nimport coctailSort from '../../algorithms/coctailSort';\n\nconst Visualisation = () => {\n   const [arr, setArr] = useState(generateArray(30));\n\n   const eventHandler = (e) => {\n      switch (e.target.id) {\n         case 'bubble':\n            bubbleSort(30, arr, setArr);\n            break;\n         case 'selection':\n            selectionSort(30, arr, setArr);\n            break;\n         case 'insertion':\n            insertionSort(30, arr, setArr);\n            break;\n         case 'merge':\n            alert(\n               'Right know it only sorts the array, still need to figure out how to implement visualisation'\n            );\n            mergeSortContainer(arr, setArr);\n            break;\n         case 'coctail':\n            coctailSort(30, arr, setArr);\n            break;\n         default:\n            break;\n      }\n      document.querySelectorAll('.btn').forEach((btn) => {\n         btn.removeEventListener('click', eventHandler);\n         btn.disabled = true;\n      });\n   };\n\n   useEffect(() => {\n      document\n         .querySelectorAll('.btn')\n         .forEach((btn) => btn.addEventListener('click', eventHandler));\n   }, []);\n\n   return (\n      <VisualisationContainer>\n         {arr.map((item, index) => (\n            <SingleBar\n               key={index}\n               className='singleBar'\n               height={Math.floor(item / 12)}\n            >\n               {item}\n            </SingleBar>\n         ))}\n      </VisualisationContainer>\n   );\n};\n\nexport default Visualisation;\n","import React from 'react';\n\nimport {\n   AppContainer,\n   HeaderContainer,\n   ButtonContainer,\n   CompareContainer,\n} from './App.styles';\nimport Visualisation from '../Visualisation/Visualisation.component';\n\nconst App = () => {\n   return (\n      <AppContainer>\n         <HeaderContainer>\n            {/* <ButtonContainer className='reset-btn'>Reset!</ButtonContainer> */}\n            <ButtonContainer id='bubble' className='bubble-btn btn'>\n               Bubble Sort\n            </ButtonContainer>\n            <ButtonContainer id='selection' className='selection-btn btn'>\n               Selection Sort\n            </ButtonContainer>\n\n            <ButtonContainer id='insertion' className='insertion-btn btn'>\n               Insertion Sort\n            </ButtonContainer>\n            <ButtonContainer id='merge' className='merge-btn btn'>\n               Merge Sort\n            </ButtonContainer>\n            <ButtonContainer id='coctail' className='coctail-btn btn'>\n               Coctail Sort\n            </ButtonContainer>\n            <label htmlFor='speed'>Speed:</label>\n            <input\n               style={{ direction: 'rtl' }}\n               id='speed'\n               type='range'\n               name='speed'\n               min='10'\n               max='1000'\n               defaultValue='300'\n            ></input>\n            <CompareContainer>\n               Compares: <span className='compares'>0</span>\n            </CompareContainer>\n         </HeaderContainer>\n         <Visualisation />\n      </AppContainer>\n   );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.component';\nimport './style.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n"],"sourceRoot":""}