{"version":3,"sources":["context/AppContext.ts","components/Visualisation/Visualisation.styles.tsx","functions/generateArray.ts","functions/setColor.ts","functions/sleep.ts","functions/setAllToBlue.ts","functions/reload.ts","functions/updateCompares.ts","functions/swap.ts","algorithms/bubbleSort.ts","algorithms/selectionSort.ts","algorithms/insertionSort.ts","algorithms/coctailSort.ts","components/Visualisation/Visualisation.component.tsx","components/App/App.styles.tsx","global.styles.ts","components/App/App.component.tsx","index.tsx"],"names":["AppContext","createContext","VisualisationContainer","styled","div","SingleBar","height","generateArray","howMany","arr","i","push","value","Math","floor","random","id","uuid","setColor","first","second","color","style","backgroundColor","sleep","a","current","delay","Number","Promise","resolve","setTimeout","setAllToBlue","Array","from","children","forEach","bar","reload","window","location","updateCompares","compares","textContent","String","swap","item1","item2","temp","bubbleSort","setArr","speedRef","barsRef","comparesRef","shouldStop","j","currentBars","selectionSort","currentSmallest","insertionSort","indexOfPreviousCounter","index","unshift","splice","flag","coctailSort","bottom","top","hasChanged","Visualisation","useState","useContext","buttons","useRef","eventHandler","e","params","target","btn","removeEventListener","disabled","useEffect","addEventListener","ref","map","item","key","className","AppContainer","HeaderContainer","header","ButtonContainer","button","CompareContainer","GlobalStyle","createGlobalStyle","App","bubbleButtonRef","selectionButtonRef","insertionButtonRef","coctailButtonRef","Provider","htmlFor","direction","type","name","min","max","defaultValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ec5b04f.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nimport { Context } from '../types';\n\nconst AppContext = createContext<Context>({} as Context);\n\nexport default AppContext;\n","import styled from 'styled-components';\n\nexport const VisualisationContainer = styled.div`\n  display: flex;\n  width: 1200px;\n  height: 85vh;\n  margin: 0 50px;\n  background-color: pink;\n  align-items: flex-end;\n  justify-content: space-between;\n`;\n\nexport const SingleBar = styled.div<{height: number}>`\n  width: 36px;\n  padding: 0 2px;\n  background-color: royalblue;\n  height: ${({ height }) => `${height}%`};\n  padding-top: 10px;\n  text-align: center;\n  font-size: 14px;\n`;\n","import { v4 as uuid } from 'uuid';\n\nimport { ArrElement } from '../types';\n\nconst generateArray = (howMany: number): Array<ArrElement> => {\n  const arr = [];\n\n  for (let i = 0; i < howMany; i++) {\n    arr.push({\n      value: Math.floor(Math.random() * 1100) + 100,\n      id: uuid(),\n    });\n  }\n  return arr;\n};\n\nexport default generateArray;\n","const setColor = (first: HTMLDivElement, second: HTMLDivElement, color: string): void => {\n  first.style.backgroundColor = color;\n  second.style.backgroundColor = color;\n};\n\nexport default setColor;\n","// something like sleep() function in other languages\n\nimport { InputRef } from '../types';\n\ninterface args {\n  current: InputRef\n}\n\nconst sleep = async ({ current }: args): Promise<void> => {\n  const delay = Number(current?.value);\n  return new Promise((resolve) => setTimeout(resolve, delay));\n};\n\nexport default sleep;\n","import { DivRef } from '../types';\n\ninterface args {\n  current: DivRef\n}\n\nconst setAllToBlue = ({ current }: args): void => {\n  const currentBars = Array.from(current!.children) as Array<HTMLAnchorElement>;\n  currentBars.forEach((bar) => {\n    bar.style.backgroundColor = 'royalblue';\n  });\n};\n\nexport default setAllToBlue;\n","const reload = (): void => {\n  setTimeout(() => {\n    window.location.reload();\n  }, 2500);\n};\n\nexport default reload;\n","import { SpanRef } from '../types';\n\ninterface args {\n  current: SpanRef\n}\n\nconst updateCompares = ({ current }: args): void => {\n  const compares = Number(current?.textContent);\n  current!.textContent = String(compares + 1);\n};\n\nexport default updateCompares;\n","import { ArrElement } from '../types';\n\nconst swap = (item1: ArrElement, item2: ArrElement): void => {\n  const temp = item1.value;\n  item1.value = item2.value;\n  item2.value = temp;\n};\n\nexport default swap;\n","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\nimport swap from '../functions/swap';\n\nimport { SortingFunction } from '../types';\n\nconst bubbleSort = async ({\n  howMany, arr, setArr, speedRef, barsRef, comparesRef,\n}: SortingFunction): Promise<void> => {\n  for (let i = 0; i < howMany; i++) {\n    let shouldStop = true;\n    for (let j = 0; j < howMany - 1 - i; j++) {\n      await sleep(speedRef);\n      const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n      setAllToBlue(barsRef);\n      setColor(currentBars[j], currentBars[j + 1], 'yellow');\n      updateCompares(comparesRef);\n      await sleep(speedRef);\n\n      if (arr[j].value > arr[j + 1].value) {\n        setColor(currentBars[j], currentBars[j + 1], 'green');\n        await sleep(speedRef);\n        swap(arr[j], arr[j + 1]);\n        shouldStop = false;\n      } else {\n        setColor(currentBars[j], currentBars[j + 1], 'red');\n      }\n      setArr([...arr]);\n    }\n    if (shouldStop) {\n      break;\n    }\n  }\n  setAllToBlue(barsRef);\n  reload();\n};\n\nexport default bubbleSort;\n","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\nimport swap from '../functions/swap';\n\nimport { SortingFunction } from '../types';\n\nconst selectionSort = async ({\n  howMany, arr, setArr, speedRef, barsRef, comparesRef,\n}: SortingFunction): Promise<void> => {\n  for (let i = 0; i < howMany; i++) {\n    let currentSmallest = i;\n    for (let j = i + 1; j < howMany; j++) {\n      await sleep(speedRef);\n      const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n      setAllToBlue(barsRef);\n      setColor(currentBars[currentSmallest], currentBars[j], 'yellow');\n      updateCompares(comparesRef);\n      await sleep(speedRef);\n\n      if (arr[currentSmallest].value > arr[j].value) {\n        setColor(currentBars[currentSmallest], currentBars[j], 'green');\n        currentSmallest = j;\n      } else {\n        setColor(currentBars[currentSmallest], currentBars[j], 'red');\n      }\n      setArr([...arr]);\n    }\n\n    const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n\n    if (arr[currentSmallest].value !== arr[i].value) {\n      setAllToBlue(barsRef);\n      setColor(currentBars[currentSmallest], currentBars[i], 'orange');\n      updateCompares(comparesRef);\n      await sleep(speedRef);\n      swap(arr[i], arr[currentSmallest]);\n      setArr([...arr]);\n    } else {\n      currentBars[currentSmallest].style.backgroundColor = 'orange';\n      updateCompares(comparesRef);\n      await sleep(speedRef);\n      await sleep(speedRef);\n    }\n  }\n  setAllToBlue(barsRef);\n  reload();\n};\n\nexport default selectionSort;\n","import sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\n\nimport { SortingFunction } from '../types';\n\nconst insertionSort = async ({\n  howMany, arr, setArr, speedRef, barsRef, comparesRef,\n}: SortingFunction): Promise<void> => {\n  let indexOfPreviousCounter = 0;\n\n  for (let i = 1; i < howMany; i++) {\n    const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n    for (let index = 0; index < i; index++) {\n      currentBars[index].style.backgroundColor = 'orange';\n    }\n    await sleep(speedRef);\n    await sleep(speedRef);\n    currentBars[i].style.backgroundColor = 'yellow';\n\n    if (arr[i].value <= arr[0].value) {\n      await sleep(speedRef);\n      updateCompares(comparesRef);\n      arr.unshift(arr.splice(i, 1)[0]);\n      for (let index = 0; index < i; index++) {\n        currentBars[index].style.backgroundColor = 'red';\n      }\n      indexOfPreviousCounter = 0;\n    } else {\n      let flag = true;\n      await sleep(speedRef);\n      for (let j = 1; j < i; j++) {\n        updateCompares(comparesRef);\n        updateCompares(comparesRef);\n\n        if (arr[i].value > arr[j - 1].value && arr[i].value <= arr[j].value) {\n          indexOfPreviousCounter = j;\n          for (let index = 0; index < j; index++) {\n            currentBars[index].style.backgroundColor = 'green';\n          }\n          flag = false;\n          arr.splice(j, 0, arr.splice(i, 1)[0]);\n          for (let index = j; index < i; index++) {\n            currentBars[index].style.backgroundColor = 'red';\n          }\n          await sleep(speedRef);\n          break;\n        }\n      }\n      if (flag) {\n        for (let index = 0; index < i + 1; index++) {\n          currentBars[index].style.backgroundColor = 'green';\n        }\n        indexOfPreviousCounter = i;\n      }\n    }\n    setArr([...arr]);\n    await sleep(speedRef);\n    await sleep(speedRef);\n    if (indexOfPreviousCounter! !== i && indexOfPreviousCounter !== howMany) {\n      currentBars[i].style.backgroundColor = 'red';\n    }\n  }\n  await sleep(speedRef);\n  setAllToBlue(barsRef);\n  reload();\n};\n\nexport default insertionSort;\n","import setColor from '../functions/setColor';\nimport sleep from '../functions/sleep';\nimport setAllToBlue from '../functions/setAllToBlue';\nimport reload from '../functions/reload';\nimport updateCompares from '../functions/updateCompares';\nimport swap from '../functions/swap';\n\nimport { SortingFunction } from '../types';\n\nconst coctailSort = async ({\n  howMany, arr, setArr, speedRef, barsRef, comparesRef,\n}: SortingFunction): Promise<void> => {\n  let bottom = 0;\n  let top = howMany - 1;\n  let hasChanged = true;\n\n  while (hasChanged) {\n    await sleep(speedRef);\n    hasChanged = false;\n\n    for (let i = bottom; i < top; i++) {\n      const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n      setAllToBlue(barsRef);\n      setColor(currentBars[i], currentBars[i + 1], 'yellow');\n      await sleep(speedRef);\n      updateCompares(comparesRef);\n      if (arr[i].value > arr[i + 1].value) {\n        setColor(currentBars[i], currentBars[i + 1], 'green');\n        await sleep(speedRef);\n        swap(arr[i], arr[i + 1]);\n        hasChanged = true;\n        setArr([...arr]);\n        await sleep(speedRef);\n      } else {\n        setColor(currentBars[i], currentBars[i + 1], 'red');\n        await sleep(speedRef);\n      }\n    }\n\n    top--;\n\n    for (let i = top; i > bottom; i--) {\n      const currentBars = Array.from(barsRef!.current!.children) as HTMLDivElement[];\n      setAllToBlue(barsRef);\n      setColor(currentBars[i], currentBars[i - 1], 'yellow');\n      await sleep(speedRef);\n      updateCompares(comparesRef);\n      if (arr[i].value < arr[i - 1].value) {\n        setColor(currentBars[i], currentBars[i - 1], 'green');\n        await sleep(speedRef);\n        swap(arr[i], arr[i - 1]);\n        hasChanged = true;\n\n        setArr([...arr]);\n        await sleep(speedRef);\n      } else {\n        setColor(currentBars[i], currentBars[i - 1], 'red');\n        await sleep(speedRef);\n      }\n    }\n    bottom++;\n  }\n  setAllToBlue(barsRef);\n  reload();\n};\n\nexport default coctailSort;\n","import React, {\n  useState, useEffect, useContext, useRef,\n} from 'react';\n\nimport AppContext from '../../context/AppContext';\nimport { VisualisationContainer, SingleBar } from './Visualisation.styles';\n\nimport generateArray from '../../functions/generateArray';\n\nimport bubbleSort from '../../algorithms/bubbleSort';\nimport selectionSort from '../../algorithms/selectionSort';\nimport insertionSort from '../../algorithms/insertionSort';\nimport coctailSort from '../../algorithms/coctailSort';\n\nimport { Context, ArrElement } from '../../types';\n\nconst Visualisation = () => {\n  const [arr, setArr] = useState<ArrElement[]>(() => generateArray(30));\n  const { speedRef, comparesRef, buttons } = useContext<Context>(AppContext);\n  const barsRef = useRef<HTMLDivElement>(null);\n\n  const eventHandler = (e: MouseEvent): void => {\n    const params = {\n      howMany: 30, arr, setArr, speedRef, barsRef, comparesRef,\n    };\n\n    switch ((e.target as HTMLButtonElement).id) {\n      case 'bubble':\n        bubbleSort(params);\n        break;\n      case 'selection':\n        selectionSort(params);\n        break;\n      case 'insertion':\n        insertionSort(params);\n        break;\n      case 'coctail':\n        coctailSort(params);\n        break;\n      default:\n        break;\n    }\n    buttons.forEach((btn: React.RefObject<HTMLButtonElement>) => {\n      btn.current!.removeEventListener('click', eventHandler);\n      btn.current!.disabled = true;\n    });\n  };\n\n  useEffect(() => {\n    buttons.forEach((btn: React.RefObject<HTMLButtonElement>) => btn.current!.addEventListener('click', eventHandler));\n  }, []);\n\n  return (\n    <VisualisationContainer ref={barsRef}>\n      {arr.map((item) => (\n        <SingleBar\n          key={item.id}\n          className=\"singleBar\"\n          height={Math.floor(item.value / 12)}\n        >\n          {item.value}\n        </SingleBar>\n      ))}\n    </VisualisationContainer>\n  );\n};\n\nexport default Visualisation;\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n   height: 100vh;\n   width: 100vw;\n   background-color: #eee;\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   flex-direction: column;\n`;\n\nexport const HeaderContainer = styled.header`\n   display: flex;\n   height: 15vh;\n   padding: 20px;\n   justify-content: center;\n   align-items: center;\n`;\n\nexport const ButtonContainer = styled.button`\n   background-color: #ccc;\n   border-radius: 15px;\n   margin-right: 30px;\n   font-size: 20px;\n   width: 150px;\n   height: 30px;\n`;\n\nexport const CompareContainer = styled.div`\nwidth: 150px;\nmargin-left: 30px;\n`;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { useRef } from 'react';\n\nimport AppContext from '../../context/AppContext';\n\nimport Visualisation from '../Visualisation/Visualisation.component';\n\nimport {\n  AppContainer,\n  HeaderContainer,\n  ButtonContainer,\n  CompareContainer,\n} from './App.styles';\n\nimport GlobalStyles from '../../global.styles';\n\nconst App = () => {\n  const speedRef = useRef<HTMLInputElement>(null);\n  const comparesRef = useRef<HTMLSpanElement>(null);\n  const bubbleButtonRef = useRef<HTMLButtonElement>(null);\n  const selectionButtonRef = useRef<HTMLButtonElement>(null);\n  const insertionButtonRef = useRef<HTMLButtonElement>(null);\n  const coctailButtonRef = useRef<HTMLButtonElement>(null);\n\n  const buttons = [bubbleButtonRef, selectionButtonRef, insertionButtonRef, coctailButtonRef];\n\n  return (\n    <AppContext.Provider value={{\n      speedRef,\n      comparesRef,\n      buttons,\n    }}\n    >\n      <GlobalStyles />\n      <AppContainer>\n        <HeaderContainer>\n          <ButtonContainer ref={bubbleButtonRef} id=\"bubble\" className=\"bubble-btn btn\">\n            Bubble Sort\n          </ButtonContainer>\n          <ButtonContainer ref={selectionButtonRef} id=\"selection\" className=\"selection-btn btn\">\n            Selection Sort\n          </ButtonContainer>\n          <ButtonContainer ref={insertionButtonRef} id=\"insertion\" className=\"insertion-btn btn\">\n            Insertion Sort\n          </ButtonContainer>\n          <ButtonContainer ref={coctailButtonRef} id=\"coctail\" className=\"coctail-btn btn\">\n            Coctail Sort\n          </ButtonContainer>\n          {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n          <label htmlFor=\"speed\">Speed:</label>\n          <input\n            ref={speedRef}\n            style={{ direction: 'rtl' }}\n            id=\"speed\"\n            type=\"range\"\n            name=\"speed\"\n            min=\"10\"\n            max=\"1000\"\n            defaultValue=\"300\"\n          />\n          <CompareContainer>\n            Compares:\n            <span ref={comparesRef} className=\"compares\">0</span>\n          </CompareContainer>\n        </HeaderContainer>\n        <Visualisation />\n      </AppContainer>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App.component';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}